// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @unique @default(uuid())
  email     String   @unique
  password  String
  status    Boolean  @default(true)
  role      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id        String   @unique @default(uuid())
  role      String
  permission Json    @default("{\"arrayPermission\":[1]}")
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Periode {
  id        String   @unique @default(uuid())
  periode   String
  nilai     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  task      Task[]
}

model Staff {
  id        String    @unique @default(uuid())
  name      String
  jabatan   String
  nip       String
  tunjangan String
  date      DateTime  @default(now())
  task      Task[]
  records   Records[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Task {
  id        String   @unique @default(uuid())
  deskripsi String
  nilai     Int
  date      DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId   String
  periode   Periode  @relation(fields: [periodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  periodeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Records {
  id        String   @unique @default(uuid())
  value     Float
  taskList  Json
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Settings {
  id        String   @id @default(uuid())
  tunjangan String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
