<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Appsch</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .status-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #28a745;
        }
        
        .status-card.warning {
            border-left-color: #ffc107;
        }
        
        .status-card.error {
            border-left-color: #dc3545;
        }
        
        .status-card h3 {
            color: #2d3748;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 15px;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #28a745;
        }
        
        .status-dot.warning {
            background: #ffc107;
        }
        
        .status-dot.error {
            background: #dc3545;
        }
        
        .metric-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }
        
        .metric-row:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            font-weight: 600;
            color: #4a5568;
        }
        
        .metric-value {
            color: #2d3748;
            font-family: 'Courier New', monospace;
        }
        
        .details-section {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .details-section h2 {
            color: #2d3748;
            margin-bottom: 20px;
            font-size: 1.5rem;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 10px;
        }
        
        .refresh-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 50px;
            padding: 15px 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            transition: all 0.3s ease;
        }
        
        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }
        
        .auto-refresh {
            text-align: center;
            margin: 20px 0;
            color: #718096;
        }
        
        .progress-bar {
            width: 100%;
            height: 4px;
            background: #e2e8f0;
            border-radius: 2px;
            overflow: hidden;
            margin-top: 10px;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 2px;
            transition: width 0.3s ease;
        }
        
        .warning-list {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .warning-list h4 {
            color: #856404;
            margin-bottom: 10px;
        }
        
        .warning-list ul {
            margin: 0;
            padding-left: 20px;
            color: #856404;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
            }
            
            .refresh-btn {
                bottom: 20px;
                right: 20px;
                padding: 12px 20px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè• Health Dashboard</h1>
            <p>Real-time application monitoring and health status</p>
            <p><strong>Last Updated:</strong> <%= new Date(timestamp).toLocaleString() %></p>
        </div>
        
        <div class="status-grid">
            <!-- Application Status -->
            <div class="status-card <%= appHealth.status === 'healthy' ? '' : 'error' %>">
                <h3>üöÄ Application Status</h3>
                <div class="status-indicator">
                    <div class="status-dot <%= appHealth.status === 'healthy' ? '' : 'error' %>"></div>
                    <strong><%= appHealth.status.toUpperCase() %></strong>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Uptime:</span>
                    <span class="metric-value"><%= appHealth.application.uptime %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Memory Used:</span>
                    <span class="metric-value"><%= appHealth.application.memory.used %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Environment:</span>
                    <span class="metric-value"><%= appHealth.application.environment %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Node Version:</span>
                    <span class="metric-value"><%= appHealth.application.nodeVersion %></span>
                </div>
            </div>
            
            <!-- Database Status -->
            <div class="status-card <%= appHealth.database.connected ? '' : 'error' %>">
                <h3>üóÑÔ∏è Database Status</h3>
                <div class="status-indicator">
                    <div class="status-dot <%= appHealth.database.connected ? '' : 'error' %>"></div>
                    <strong><%= appHealth.database.connected ? 'CONNECTED' : 'DISCONNECTED' %></strong>
                </div>
                <% if (appHealth.database.connected) { %>
                <div class="metric-row">
                    <span class="metric-label">Response Time:</span>
                    <span class="metric-value"><%= appHealth.database.responseTime %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Version:</span>
                    <span class="metric-value"><%= appHealth.database.version %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Tables:</span>
                    <span class="metric-value"><%= appHealth.database.tableCount %></span>
                </div>
                <% } else { %>
                <div class="metric-row">
                    <span class="metric-label">Error:</span>
                    <span class="metric-value"><%= appHealth.database.error %></span>
                </div>
                <% } %>
            </div>
            
            <!-- Connection Pool Status -->
            <div class="status-card">
                <h3>üîó Connection Pool</h3>
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <strong>ACTIVE</strong>
                </div>
                <% if (poolStatus.pool && !poolStatus.pool.error) { %>
                <div class="metric-row">
                    <span class="metric-label">Used:</span>
                    <span class="metric-value"><%= poolStatus.pool.used %>/<%= poolStatus.pool.max %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Free:</span>
                    <span class="metric-value"><%= poolStatus.pool.free %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Pending:</span>
                    <span class="metric-value"><%= poolStatus.pool.pending %></span>
                </div>
                <% } else { %>
                <div class="metric-row">
                    <span class="metric-label">Status:</span>
                    <span class="metric-value">Unable to retrieve</span>
                </div>
                <% } %>
            </div>
            
            <!-- Performance Metrics -->
            <div class="status-card">
                <h3>üìä Performance</h3>
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <strong>MONITORING</strong>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Total Requests:</span>
                    <span class="metric-value"><%= metrics.requests.total %></span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Success Rate:</span>
                    <span class="metric-value"><%= metrics.requests.total > 0 ? Math.round((metrics.requests.success / metrics.requests.total) * 100) : 0 %>%</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Avg Response:</span>
                    <span class="metric-value"><%= metrics.requests.averageResponseTime %>ms</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">DB Queries:</span>
                    <span class="metric-value"><%= metrics.database.queries %></span>
                </div>
            </div>
        </div>
        
        <!-- Warnings -->
        <% if (appHealth.warnings && appHealth.warnings.length > 0) { %>
        <div class="warning-list">
            <h4>‚ö†Ô∏è Warnings</h4>
            <ul>
                <% appHealth.warnings.forEach(warning => { %>
                <li><%= warning %></li>
                <% }); %>
            </ul>
        </div>
        <% } %>
        
        <!-- System Information -->
        <div class="details-section">
            <h2>üíª System Information</h2>
            <div class="status-grid">
                <div>
                    <div class="metric-row">
                        <span class="metric-label">Platform:</span>
                        <span class="metric-value"><%= systemInfo.system.platform %></span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Architecture:</span>
                        <span class="metric-value"><%= systemInfo.system.arch %></span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">CPUs:</span>
                        <span class="metric-value"><%= systemInfo.system.cpus %></span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Total Memory:</span>
                        <span class="metric-value"><%= systemInfo.system.totalMemory %></span>
                    </div>
                </div>
                <div>
                    <div class="metric-row">
                        <span class="metric-label">Free Memory:</span>
                        <span class="metric-value"><%= systemInfo.system.freeMemory %></span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">System Uptime:</span>
                        <span class="metric-value"><%= systemInfo.system.uptime %></span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Process ID:</span>
                        <span class="metric-value"><%= systemInfo.process.pid %></span>
                    </div>
                    <div class="metric-row">
                        <span class="metric-label">Working Directory:</span>
                        <span class="metric-value"><%= systemInfo.process.cwd %></span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="auto-refresh">
            <p>üîÑ Auto-refresh in <span id="countdown">30</span> seconds</p>
            <div class="progress-bar">
                <div class="progress-fill" id="progress"></div>
            </div>
        </div>
    </div>
    
    <button class="refresh-btn" onclick="location.reload()">
        üîÑ Refresh Now
    </button>
    
    <script>
        // Auto refresh countdown
        let countdown = 30;
        const countdownElement = document.getElementById('countdown');
        const progressElement = document.getElementById('progress');
        
        const timer = setInterval(() => {
            countdown--;
            countdownElement.textContent = countdown;
            
            // Update progress bar
            const progress = ((30 - countdown) / 30) * 100;
            progressElement.style.width = progress + '%';
            
            if (countdown <= 0) {
                location.reload();
            }
        }, 1000);
        
        // Pause auto-refresh when page is not visible
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                clearInterval(timer);
            } else {
                location.reload();
            }
        });
    </script>
</body>
</html>