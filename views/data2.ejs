<div class="main-content position-relative border-radius-lg p-4">
    <div class="container-fluid card p-4">
        <%- include('./components/button-go-back.ejs') %>

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@12.1.0/dist/handsontable.full.min.css">
        <script src="https://cdn.jsdelivr.net/npm/handsontable@12.1.0/dist/handsontable.full.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
        <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>


        <h3>Records</h3>

        <form action="/filterRecords" method="POST">
            <div class="row g-3 align-items-center">
                <div class="col-auto">
                    <label for="start-date" class="col-form-label">Start Date</label>
                </div>
                <div class="col-auto">
                    <input type="date" id="start-date" class="form-control" name="gte" required>
                </div>
                <div class="col-auto">
                    <label for="end-date" class="col-form-label">End Date</label>
                </div>
                <div class="col-auto">
                    <input type="date" id="end-date" class="form-control" name="lte" required>
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-primary">Filter</button>
                </div>
            </div>
        </form>

        <div id="excelTable" style="width: 100%; height: 500px; margin: 20px auto;"></div>

        <button id="exportExcel" class="btn btn-success">Export to Excel</button>
        <button id="export-file" class="btn btn-warning">Export to Excel2</button>

        <script>
            // Ambil data dari EJS template
            const jsonData = <%- JSON.stringify(records) %>;
            console.log("Data dari backend:", jsonData); // Untuk debugging

            const totalDays = 30; // Jumlah tanggal yang ingin ditampilkan (1-30)
            const grouped = {};

            // 1. Grouping data berdasarkan nama staff dan tanggal
            jsonData.forEach(entry => {
                // Pastikan entry memiliki staff dan createdAt yang valid
                if (!entry.staff || !entry.createdAt) {
                    console.warn("Entry tidak valid:", entry);
                    return;
                }

                const staffName = entry.staff.name;
                const entryDate = new Date(entry.createdAt).getDate(); // Ambil tanggal (1-31)

                // Validasi tanggal (1-30)
                if (entryDate < 1 || entryDate > 30) {
                    console.warn(`Tanggal tidak valid: ${entryDate} untuk staff ${staffName}`);
                    return;
                }

                if (!grouped[staffName]) {
                    grouped[staffName] = {
                        name: staffName,
                        tanggal: Array(totalDays).fill(0) // Array dengan 30 elemen bernilai 0
                    };
                }

                // Tambahkan nilai ke tanggal yang sesuai
                // Menggunakan value dari entry atau jumlah taskValue jika ada taskList
                let value = entry.value || 0;
                if (entry.taskList && entry.taskList.length > 0) {
                    value = entry.taskList.reduce((sum, task) => sum + (task.taskValue || 0), 0);
                }

                grouped[staffName].tanggal[entryDate - 1] += value; // -1 karena array dimulai dari 0
            });

            // 2. Siapkan data untuk tabel
            const tableData = [];
            let no = 1;
            for (const staffName in grouped) {
                const staffData = grouped[staffName];
                const row = {
                    no: no++,
                    nama: staffData.name
                };

                let total = 0;
                for (let i = 0; i < totalDays; i++) {
                    const val = staffData.tanggal[i] || 0;
                    row[`tanggal_${i + 1}`] = val; // +1 karena tanggal dimulai dari 1
                    total += val;
                }

                row.total = total;
                tableData.push(row);
            }

            console.log("Data untuk tabel:", tableData); // Untuk debugging

            // 3. Setup Handsontable
            const columns = [
                { data: 'no', readOnly: true, width: 50 },
                { data: 'nama', readOnly: true, width: 150 },
                ...Array.from({ length: totalDays }, (_, i) => ({
                    data: `tanggal_${i + 1}`,
                    readOnly: true,
                    width: 60,
                    renderer: function(instance, td, row, col, prop, value) {
                        // Render nilai 0 sebagai string kosong
                        Handsontable.renderers.TextRenderer.apply(this, arguments);
                        if (value === 0) {
                            td.textContent = '';
                        }
                    }
                })),
                { data: 'total', readOnly: true, width: 80 }
            ];

            const colHeaders = [
                'No', 'Nama',
                ...Array.from({ length: totalDays }, (_, i) => `${i + 1}`), // Hanya angka tanggal
                'Total'
            ];

            const container = document.getElementById('excelTable');
            const hot = new Handsontable(container, {
                data: tableData,
                colHeaders: colHeaders,
                columns: columns,
                rowHeaders: false,
                licenseKey: 'non-commercial-and-evaluation',
                width: '100%',
                height: '500px',
                stretchH: 'all',
                manualColumnResize: true,
                manualRowResize: true,
                contextMenu: false,
                filters: true,
                dropdownMenu: true
            });

            // 4. Fungsi Export Excel
            document.getElementById("exportExcel").addEventListener("click", function() {
                // Siapkan data untuk export
                const exportData = [
                    ['No', 'Nama', ...Array.from({ length: totalDays }, (_, i) => `${i + 1}`), 'Total']
                ];

                tableData.forEach(row => {
                    const rowData = [row.no, row.nama];
                    for (let i = 1; i <= totalDays; i++) {
                        rowData.push(row[`tanggal_${i}`] || 0);
                    }
                    rowData.push(row.total);
                    exportData.push(rowData);
                });

                // Convert ke worksheet Excel
                const worksheet = XLSX.utils.aoa_to_sheet(exportData);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Data Karyawan");

                // Export ke file
                XLSX.writeFile(workbook, `Data_Karyawan_${new Date().toISOString().slice(0,10)}.xlsx`);
            });


            //another export function

            const exportPlugin = hot.getPlugin('exportFile');
            const button = document.getElementById('export-file');

            button.addEventListener('click', () => {
                console.log("exp");
                exportPlugin.downloadFile('csv', {
                    bom: false,
                    columnDelimiter: ',',
                    columnHeaders: false,
                    exportHiddenColumns: true,
                    exportHiddenRows: true,
                    fileExtension: 'csv',
                    filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',
                    mimeType: 'text/csv',
                    rowDelimiter: '\r\n',
                    rowHeaders: true,
                });
            });
        </script>
    </div>
</div>
